generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider  = "postgresql"
  url       = env("DATABASE_URL")
  directUrl = env("DIRECT_URL")
}

model Role {
  id    String @id @default(uuid())
  name  String @unique
  users User[]
}

model Notification {
  id        String    @id @default(uuid())
  userId    String
  message   String
  createdAt DateTime
  bookings  Booking[]
  user      User      @relation(fields: [userId], references: [id])
}

model User {
  id              String         @id @default(uuid())
  displayName     String         @unique
  password        String
  email           String         @unique
  emailVerifToken String?        @db.VarChar(255)
  emailVerifiedAt DateTime?
  phone           String?        @unique
  address         String?
  imageUrl        String?
  rolesId         String
  bookings        Booking[]
  notifications   Notification[]
  venue           Venue?
  roles           Role           @relation(fields: [rolesId], references: [id])
}


model Venue {
  id       String   @id @default(uuid())
  userId   String   @unique
  name     String
  logo     String
  location String
  lat      String
  long     String
  products Product[]
  user     User     @relation(fields: [userId], references: [id])
}

model Product {
  id            String        @id @default(uuid())
  name          String
  userId        String
  venueId       String
  categoryId    String
  subcategoryId String
  facilities    String[]
  pricePerHour  Float
  pricePerDay   Float
  description   String
  imageUrl      String
  bookings      Booking[]
  category      Categories      @relation(fields: [categoryId], references: [id])
  subcategory   Subcategories   @relation(fields: [subcategoryId], references: [id])
  venue         Venue         @relation(fields: [venueId], references: [id])
  
}
model Categories {
  id            String    @id @default(uuid())
  name          String
  Subcategories Subcategories[]
  Products      Product[]
}

model Subcategories {
  id          String    @id @default(uuid())
  categoryId  String
  name        String
  product     Product[]
  category    Categories @relation(fields: [categoryId], references: [id])
}


model Booking {
  id             String       @id @default(uuid())
  userId         String
  productId      String
  paymentId      String
  notificationId String
  bookingDate    DateTime
  duration       Float
  notification   Notification @relation(fields: [notificationId], references: [id])
  payment        Payment      @relation(fields: [paymentId], references: [id])
  product        Product      @relation(fields: [productId], references: [id])
  user           User         @relation(fields: [userId], references: [id])
}

model Payment {
  id            String      @id @default(uuid())
  amount        Float
  method        String
  transactionId String
  booking       Booking[]
  transaction   Transaction @relation(fields: [transactionId], references: [id])
}

model Transaction {
  id        String            @id @default(uuid())
  statusId  String
  amount    Float
  createdAt DateTime
  payments  Payment[]
  status    TransactionStatus @relation(fields: [statusId], references: [id])
}

model TransactionStatus {
  id           String        @id @default(uuid())
  status       String
  transactions Transaction[]
}

