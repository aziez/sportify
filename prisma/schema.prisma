generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider  = "postgresql"
  url       = env("DATABASE_URL")
  directUrl = env("DIRECT_URL")
}


model Role {
  id  String @id @default(uuid())
  name  String
  users User[]
  vendor Vendor[]
}

model User {
  id              String         @id @default(uuid())
  displayName     String
  email           String
  rolesId         String
  roles           Role           @relation(fields: [rolesId], references: [id])
  bookings        Booking[]
  notifications   Notification[]
}

model Vendor {
  id                      String         @id @default(uuid())
  displayName             String
  email                   String
  phone                   String
  address                 String
  rolesId                 String
  roles                   Role           @relation(fields: [rolesId], references: [id])
  products                Product[]
  notifications           Notification[]
}


model Notification {
  id        String      @id @default(uuid())
  userId    String
  vendorId  String
  message   String
  createdAt DateTime
  user      User        @relation(fields: [userId], references: [id])
  vendor    Vendor      @relation(fields: [vendorId], references: [id])
  bookings  Booking[]
}


model Product {
  id          String    @id @default(uuid())
  vendorId    String
  name        String
  category    String
  location    String
  address     String
  facilities  String
  pricePerHour Float
  pricePerDay  Float
  description String
  imageUrl    String
  vendor      Vendor    @relation(fields: [vendorId], references: [id])
  bookings    Booking[]
}


model Booking {
  id             String        @id @default(uuid())
  userId         String
  productId      String
  paymentId      String
  notificationId String
  bookingDate    DateTime
  duration       Float
  user           User          @relation(fields: [userId], references: [id])
  product        Product       @relation(fields: [productId], references: [id])
  payment        Payment       @relation(fields: [paymentId], references: [id])
  notification   Notification  @relation(fields: [notificationId], references: [id])
}

model Payment {
  id             String        @id @default(uuid())
  amount         Float
  method         String
  transactionId  String
  transaction    Transaction   @relation(fields: [transactionId], references: [id])
  booking        Booking[]
}

model Transaction {
  id        String             @id @default(uuid())
  statusId  String
  amount    Float
  createdAt DateTime
  status    TransactionStatus  @relation(fields: [statusId], references: [id])
  payments  Payment[]
}

model TransactionStatus {
  id            String         @id @default(uuid())
  status        String
  transactions  Transaction[]
}

